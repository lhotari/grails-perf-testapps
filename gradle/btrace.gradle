import groovy.text.*
import groovy.text.markup.*

// add configuration for btrace (https://github.com/jbachorik/btrace)
// usage:
// apply from:'/path/to/btrace.gradle'
// place btrace scripts in btrace directory
sourceSets {
    btrace {
        java {
            srcDir 'btrace'
        }
    }
}

configurations {
  btraceAgent
}

ext {
    if(!project.hasProperty("btraceHome")) {
        btraceHome = System.getenv("BTRACE_HOME") ?: "${System.getProperty('user.home')}/tools/btrace".toString()
    }
}

dependencies {
    // btrace 1.2.5.1 version isn't available in maven
    // download from https://kenai.com/projects/btrace/downloads/directory/releases
    // use BTRACE_HOME environment variable to set home directory
    compile files("$btraceHome/build/btrace-boot.jar")
    btraceCompile files("$btraceHome/build/btrace-boot.jar")
    btraceAgent files("$btraceHome/build/btrace-agent.jar")
}

task btraceInstall(type: Copy, dependsOn: btraceClasses) {
    from(compileBtraceJava.outputs.files)
    into("$buildDir/btrace-scripts")
    eachFile { details ->
        details.path = details.name
    }
    includeEmptyDirs = false
}

task generateProfilerProbeXml << {
    File probesTxt = new File('btrace-probes/profiler-probes.txt')
    if(probesTxt.exists()) {
        def probes = []
        probesTxt.eachLine { line ->
            if(line.trim()) {
                probes << line.trim()
            }
        }
        TemplateConfiguration config = new TemplateConfiguration()
        config.autoIndent = true
        config.autoNewLine = true
        MarkupTemplateEngine engine = new MarkupTemplateEngine(config)  
        Template xmltemplate = engine.createTemplate('''
 "btrace-probes"(namespace:"profiler-probes") {
    ["profiler-entry","profiler-exit"].each { phase -> 
        probe(name:phase) {
            for(probeentry in probes) {
                def matcher = (probeentry =~ /^([^\\/]+)\\.(.+)$/)[0]
                def classname = matcher[1]
                def methodname = matcher[2]
                map {
                    clazz(classname)
                    method(methodname)
                    if(phase=="profiler-exit") {
                        location {
                            value("RETURN")
                        }
                    }
                }
            }
        }
    }
}
            ''')
        new File('btrace-probes/profiler-probes.xml').withWriter { writer ->
            xmltemplate.make([probes: probes]).writeTo(writer)
        }  
    }
}


task generateLegstopwatchProbeXml << {
    File probesTxt = new File('btrace-probes/legstopwatch-probes.txt')
    if(probesTxt.exists()) {
        def probes = []
        probesTxt.eachLine { line ->
            if(line.trim()) {
                probes << line.trim()
            }
        }
        TemplateConfiguration config = new TemplateConfiguration()
        config.autoIndent = true
        config.autoNewLine = true
        MarkupTemplateEngine engine = new MarkupTemplateEngine(config)  
        Template xmltemplate = engine.createTemplate('''
 "btrace-probes"(namespace:"legstopwatch-probes") {
    probe(name:"legstopwatch-probe") {
        for(probeentry in probes) {
            def parts = probeentry.split(":")
            def classname = parts[0]
            def methodname = parts.size() > 2 ? parts[1] : "/.+/"
            def linenumber = parts[-1]
            map {
                clazz(classname)
                method(methodname)
                location {
                    value("LINE")
                    line(linenumber)
                }
            }
        }
    }
}
            ''')
        new File('btrace-probes/legstopwatch-probes.xml').withWriter { writer ->
            xmltemplate.make([probes: probes]).writeTo(writer)
        }  
    }
}

run {
    dependsOn(btraceInstall, generateProfilerProbeXml, generateLegstopwatchProbeXml)
    def btraceAgentJar = "$btraceHome/build/btrace-agent.jar"
    def debugMode = false
    if(project.hasProperty("btraceDebug") && project.getProperty("btraceDebug")) {
        debugMode = true
    }
    jvmArgs += ["-Xshare:off","-Xverify:none","-javaagent:$btraceAgentJar=scriptdir=$buildDir/btrace-scripts,probeDescPath=${project.file('btrace-probes')},stdout=true,noServer=true${debugMode ? ',debug=true' : ''}".toString()]
}
